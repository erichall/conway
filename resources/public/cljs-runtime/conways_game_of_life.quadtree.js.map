{"version":3,"sources":["conways_game_of_life/quadtree.cljc"],"mappings":"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","names":["conways-game-of-life.quadtree/not-nil?","x","conways-game-of-life.quadtree/two-pow","n","conways-game-of-life.quadtree/make-leaf","cell","alive?","var_args","G__33707","conways-game-of-life.quadtree/make-node","js/Error","nw","ne","se","sw","conways_game_of_life.quadtree.make_node.cljs$core$IFn$_invoke$arity$5","or__4185__auto__","depth","conways-game-of-life.quadtree/node","bounds","conways-game-of-life.quadtree/bound-by-depth","root-bounds","conways-game-of-life.quadtree/nw?","b","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.quadtree/ne?","conways-game-of-life.quadtree/se?","conways-game-of-life.quadtree/sw?","conways-game-of-life.quadtree/nw-split","w","d","conways-game-of-life.quadtree/ne-split","conways-game-of-life.quadtree/se-split","conways-game-of-life.quadtree/sw-split","conways-game-of-life.quadtree/memo-nw-split","cljs.core/memoize","conways-game-of-life.quadtree/memo-ne-split","conways-game-of-life.quadtree/memo-se-split","conways-game-of-life.quadtree/memo-sw-split","p__33708","map__33709","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$3","conways-game-of-life.quadtree/in-bounds?","values__8921__auto__","cljs.core/List","result__8922__auto__","cljs.test/do-report","cljs.core/cons","t__8952__auto__","e33711","cljs.core/=","e33712","e33713","e33714","e33715","e33716","e33717","e33718","e33719","e33720","e33721","e33722","e33723","e33724","e33725","e33726","e33727","e33728","e33729","e33730","e33731","e33732","e33733","e33734","e33735","e33736","e33737","e33738","e33739","e33740","e33741","e33742","e33743","e33744","e33745","e33746","e33747","e33748","e33749","e33750","e33751","e33752","e33753","e33754","e33755","e33756","e33757","e33758","e33759","e33760","e33761","e33762","e33763","e33764","e33765","e33766","e33767","e33768","e33769","e33770","e33771","e33772","e33773","y","width","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","conways-game-of-life.quadtree/tree=cell","tree","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.quadtree/bounds=cell","conways-game-of-life.quadtree/insert-struggle","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","next-depth","G__33774","G__33775","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__33776","G__33777","G__33778","G__33779","G__33780","G__33781","G__33782","G__33783","conways-game-of-life.quadtree/insert","G__33784","G__33785","G__33786","G__33787","G__33788","G__33789","G__33790","G__33791","G__33792","G__33793","G__33794","G__33795","G__33796","G__33797","G__33798","G__33799","conways-game-of-life.quadtree/insert-cells","cells","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","conways-game-of-life.quadtree/empty-node","conways-game-of-life.quadtree/empty-tree","G__33800","G__33801","G__33802","G__33803","conways-game-of-life.quadtree/find-leaf","pred","G__33806","G__33807","G__33810","G__33811","G__33814","G__33815","G__33816","G__33817"],"sourcesContent":["(ns conways-game-of-life.quadtree\n  (:require [clojure.pprint :refer [pprint]]\n            [clojure.test :refer [is deftest]]\n            ))\n\n(defn not-nil? [x] (not (nil? x)))\n(defn two-pow\n  \"computes 2 ^ n\"\n  [n]\n  (bit-shift-left 1 n))\n\n(defn make-leaf\n  [cell alive?]\n  {:cell       cell\n   :depth      0\n   :alive?     alive?\n   :population (if alive? 1 0)})\n\n(defn make-node\n  ([nw ne se sw] (make-node nw ne se sw (inc (or (:depth nw) 0))))\n  ([nw ne se sw depth]\n   {:depth depth\n    :nw    nw\n    :ne    ne\n    :se    se\n    :sw    sw}))\n\n(defn node\n  [bounds depth]\n  {:bounds     bounds\n   :population 0\n   :depth      depth})\n\n(defn bound-by-depth\n  \"Calculate the boundary from root node to a given depth\"\n  [root-bounds depth]\n  (/ (:x root-bounds) (two-pow (- 3 depth))))\n\n;Bounds is centered around a 2x2\n;    nw  ne\n;    sw  se\n(defn nw? [^long b cell] (and (= (- b 1) (:x cell)) (= (- b 1) (:y cell))))\n(defn ne? [^long b cell] (and (= b (:x cell)) (= (- b 1) (:y cell))))\n(defn se? [^long b cell] (and (= b (:x cell)) (= b (:y cell))))\n(defn sw? [^long b cell] (and (= (- b 1) (:x cell)) (= b (:y cell))))\n\n\n(defn nw-split\n  [bounds w d]\n  (if (= d 0)\n    {:x (- (:x bounds) 1) :y (- (:y bounds) 1)}\n    {:x (- (:x bounds) w) :y (- (:y bounds) w) :width w}))\n(defn ne-split\n  [bounds w d]\n  (if (= d 0)\n    {:x (:x bounds) :y (- (:y bounds) 1)}\n    {:x (+ (:x bounds) w) :y (- (:y bounds) w) :width w}))\n(defn se-split\n  [bounds w d]\n  (if (= d 0)\n    {:x (:x bounds) :y (:y bounds)}\n    {:x (+ (:x bounds) w) :y (+ (:y bounds) w) :width w}))\n(defn sw-split\n  [bounds w d]\n  (if (= d 0)\n    {:x (- (:x bounds) 1) :y (:y bounds)}\n    {:x (- (:x bounds) w) :y (+ (:y bounds) w) :width w}))\n(def memo-nw-split (memoize nw-split))\n(def memo-ne-split (memoize ne-split))\n(def memo-se-split (memoize se-split))\n(def memo-sw-split (memoize sw-split))\n\n(defn in-bounds?\n  \"Check if a given cell is within a boundary.\"\n  {:test (fn []\n           ;; nw bounds {:x 2, :y 2, :w 2} in 8x8, x,y = 0,0. 3,0. 3,0. 3,3\n           (let [b {:x 2 :y 2 :width 2}]\n             (is (= (in-bounds? b {:x 0 :y 0}) true))\n             (is (= (in-bounds? b {:x 3 :y 0}) true))\n             (is (= (in-bounds? b {:x 0 :y 3}) true))\n             (is (= (in-bounds? b {:x 3 :y 3}) true))\n             (is (= (in-bounds? b {:x 4 :y 0}) false))\n             (is (= (in-bounds? b {:x 4 :y 4}) false))\n             (is (= (in-bounds? b {:x 0 :y 4}) false)))\n\n           ;; ne bounds {:x 6, :y 2, :w 2} x,y = 3,0. 7,0. 7,3. 3,3\n           (let [b {:x 6 :y 2 :width 2}]\n             (is (= (in-bounds? b {:x 4 :y 0}) true))\n             (is (= (in-bounds? b {:x 7 :y 0}) true))\n             (is (= (in-bounds? b {:x 7 :y 3}) true))\n             (is (= (in-bounds? b {:x 4 :y 3}) true))\n             (is (= (in-bounds? b {:x 3 :y 3}) false))\n             (is (= (in-bounds? b {:x 3 :y 0}) false))\n             (is (= (in-bounds? b {:x 8 :y 0}) false))\n             (is (= (in-bounds? b {:x 4 :y 4}) false)))\n\n           ;; se bounds {:x 6 :y 6, w: 2} x,y = 4,4. 7,4, 7,7. 4,7\n           (let [b {:x 6 :y 6 :width 2}]\n             (is (= (in-bounds? b {:x 4 :y 4}) true))\n             (is (= (in-bounds? b {:x 7 :y 4}) true))\n             (is (= (in-bounds? b {:x 7 :y 7}) true))\n             (is (= (in-bounds? b {:x 4 :y 7}) true))\n             (is (= (in-bounds? b {:x 3 :y 4}) false))\n             (is (= (in-bounds? b {:x 4 :y 3}) false))\n             (is (= (in-bounds? b {:x 8 :y 8}) false))\n             (is (= (in-bounds? b {:x 3 :y 7}) false)))\n           ;; sw bounds {:x 2 :y 6, :w 2} x,y = 0,4. 3,4. 3,7. 0.7\n           (let [b {:x 2 :y 6 :width 2}]\n             (is (= (in-bounds? b {:x 0 :y 4}) true))\n             (is (= (in-bounds? b {:x 3 :y 4}) true))\n             (is (= (in-bounds? b {:x 3 :y 7}) true))\n             (is (= (in-bounds? b {:x 0 :y 7}) true))\n             (is (= (in-bounds? b {:x 3 :y 3}) false))\n             (is (= (in-bounds? b {:x 4 :y 4}) false))\n             (is (= (in-bounds? b {:x 0 :y 3}) false))\n             (is (= (in-bounds? b {:x 4 :y 7}) false)))\n\n           ;; a nw super square as in hashlife\n           ;; bounds {:x 3, :y 3, :w 2}, x,y = 1,1 4,1 4,4, 1,4\n           (let [b {:x 3 :y 3 :width 2}]\n             (is (= (in-bounds? b {:x 1 :y 1}) true))\n             (is (= (in-bounds? b {:x 4 :y 1}) true))\n             (is (= (in-bounds? b {:x 4 :y 4}) true))\n             (is (= (in-bounds? b {:x 1 :y 4}) true))\n             (is (= (in-bounds? b {:x 0 :y 0}) false))\n             (is (= (in-bounds? b {:x 1 :y 0}) false))\n             (is (= (in-bounds? b {:x 1 :y 5}) false))\n             (is (= (in-bounds? b {:x 5 :y 4}) false)))\n\n           ;; a ne super square as in hashlife for 8x8\n           ;; bounds {:x 5 :y 3 :w 2} x,y = 3,1 6,1 6,4 3,4\n           (let [b {:x 5 :y 3 :width 2}]\n             (is (= (in-bounds? b {:x 3 :y 1}) true))\n             (is (= (in-bounds? b {:x 6 :y 1}) true))\n             (is (= (in-bounds? b {:x 6 :y 4}) true))\n             (is (= (in-bounds? b {:x 3 :y 4}) true))\n             (is (= (in-bounds? b {:x 2 :y 1}) false))\n             (is (= (in-bounds? b {:x 3 :y 5}) false))\n             (is (= (in-bounds? b {:x 7 :y 1}) false))\n             (is (= (in-bounds? b {:x 6 :y 5}) false)))\n\n           ;; a se super square as in hashlife for 8x8\n           ;; bounds {:x 5 :y 5, w: 2} x,y = 3,3 3,6 6,3 6,6\n           (let [b {:x 5 :y 5 :width 2}]\n             (is (= (in-bounds? b {:x 3 :y 3}) true))\n             (is (= (in-bounds? b {:x 3 :y 6}) true))\n             (is (= (in-bounds? b {:x 6 :y 3}) true))\n             (is (= (in-bounds? b {:x 6 :y 6}) true))\n             (is (= (in-bounds? b {:x 3 :y 2}) false))\n             (is (= (in-bounds? b {:x 7 :y 3}) false))\n             (is (= (in-bounds? b {:x 6 :y 7}) false))\n             (is (= (in-bounds? b {:x 2 :y 6}) false)))\n\n           ;; a sw super squuare as in hashlife for 8x8\n           ;; bounds {:x 3 :y 5 :w 2} x,y = 1,3 4,3 4,6 1,6\n           (let [b {:x 3 :y 5 :width 2}]\n             (is (= (in-bounds? b {:x 1 :y 3}) true))\n             (is (= (in-bounds? b {:x 4 :y 3}) true))\n             (is (= (in-bounds? b {:x 4 :y 6}) true))\n             (is (= (in-bounds? b {:x 1 :y 6}) true))\n             (is (= (in-bounds? b {:x 3 :y 2}) false))\n             (is (= (in-bounds? b {:x 7 :y 3}) false))\n             (is (= (in-bounds? b {:x 6 :y 7}) false))\n             (is (= (in-bounds? b {:x 1 :y 2}) false))))}\n  [{:keys [x y width] :or {width 0}} cell]\n  (println x y width cell)\n  (if (nil? x)\n    false\n    (and (>= (:x cell) (- x width))\n         (< (:x cell) (+ x width))\n         (>= (:y cell) (- y width))\n         (< (:y cell) (+ y width)))))\n\n(defn tree=cell\n  [tree cell]\n  (and (= (get-in tree [:bounds :x]) (:x cell))\n       (= (get-in tree [:bounds :y]) (:y cell))))\n\n(defn bounds=cell\n  [bounds cell]\n  (and (= (:x bounds) (:x cell))\n       (= (:y bounds) (:y cell))))\n\n(defn insert-struggle\n  [tree cell]\n  (cond\n    (not (in-bounds? (:bounds tree) cell))\n    tree\n\n    (= (:depth tree) 1)\n    (let [w (/ (:width (:bounds tree)) 2)\n          b (:bounds tree)]\n      (cond\n        (bounds=cell (memo-nw-split b w 0) cell) (assoc tree :nw cell)\n        (bounds=cell (memo-ne-split b w 0) cell) (assoc tree :ne cell)\n        (bounds=cell (memo-se-split b w 0) cell) (assoc tree :se cell)\n        (bounds=cell (memo-sw-split b w 0) cell) (assoc tree :sw cell)\n        :else tree))\n\n    (= (:depth tree) 0)\n    (if (tree=cell tree cell)\n      cell\n      nil)\n\n    (nil? (:nw tree))\n    (let [next-depth (dec (:depth tree))\n          w (/ (:width (:bounds tree)) 2)\n          b (:bounds tree)\n          n (insert-struggle (merge tree (make-node {:bounds (memo-nw-split b w next-depth)\n                                                     :depth  next-depth}\n                                                    {:bounds (memo-ne-split b w next-depth)\n                                                     :depth  next-depth}\n                                                    {:bounds (memo-se-split b w next-depth)\n                                                     :depth  next-depth}\n                                                    {:bounds (memo-sw-split b w next-depth)\n                                                     :depth  next-depth}\n                                                    (:depth tree))) cell)\n          ]\n      n)\n\n    :else\n    (merge tree {:nw (insert-struggle (:nw tree) cell)\n                 :ne (insert-struggle (:ne tree) cell)\n                 :se (insert-struggle (:se tree) cell)\n                 :sw (insert-struggle (:sw tree) cell)})))\n\n(defn insert\n  [tree cell]\n  (cond\n    (= (:depth tree) 0)\n    (if (and (= (get-in tree [:bounds :x]) (:x cell))\n             (= (get-in tree [:bounds :y]) (:y cell)))\n      cell\n      tree)\n\n    (not (in-bounds? (:bounds tree) cell))\n    tree\n\n    (nil? (:nw tree))\n    (let [next-depth (dec (:depth tree))\n          w (/ (:width (:bounds tree)) 2)\n          b (:bounds tree)]\n      (merge tree {:nw (-> (nw-split b w next-depth)\n                           (node next-depth)\n                           (insert cell))\n                   :ne (-> (ne-split b w next-depth)\n                           (node next-depth)\n                           (insert cell))\n                   :se (-> (se-split b w next-depth)\n                           (node next-depth)\n                           (insert cell))\n                   :sw (-> (sw-split b w next-depth)\n                           (node next-depth)\n                           (insert cell))})\n      )\n\n    :else\n    (merge tree {:nw (insert (:nw tree) cell)\n                 :ne (insert (:ne tree) cell)\n                 :se (insert (:se tree) cell)\n                 :sw (insert (:sw tree) cell)})\n    ))\n\n(defn insert-cells\n  [tree cells]\n  (reduce (fn [tree cell]\n            ;(println \"INSERTING CELL \" cell \"INTO\")\n            ;(pprint tree)\n            (insert tree cell)) tree cells))\n\n\n(def empty-node\n  {:nw (make-leaf nil false)\n   :ne (make-leaf nil false)\n   :se (make-leaf nil false)\n   :sw (make-leaf nil false)})\n\n(defn empty-tree\n  \"Creates a empty tree of depth n that fits a square board of 2^tree-depth x 2^tree-depth cells.\"\n  [tree]\n  (cond\n    (= 1 (:depth tree))\n    (merge tree empty-node)\n\n    :else\n    (let [next-depth (dec (:depth tree))]\n      (-> tree\n          (assoc :population 0)\n          (assoc :nw (empty-tree {:depth next-depth}))\n          (assoc :ne (empty-tree {:depth next-depth}))\n          (assoc :se (empty-tree {:depth next-depth}))\n          (assoc :sw (empty-tree {:depth next-depth}))))))\n\n(defn find-leaf\n  \"Find a leaf in a tree according to pred\"\n  [tree pred]\n  (cond\n    (nil? tree) nil\n\n    (or (= (:depth tree) 0) (nil? (:depth tree)))\n    (if (pred tree)\n      tree\n      nil)\n\n    :else\n    (or (find-leaf (:nw tree) pred)\n        (find-leaf (:ne tree) pred)\n        (find-leaf (:se tree) pred)\n        (find-leaf (:sw tree) pred)))\n  )\n\n(comment\n\n  (let [tree (empty-tree {:depth  3\n                          :bounds {:x 4 :y 4}})]\n    (-> {:depth  3\n         :bounds {:x     4\n                  :y     4\n                  :width 4}}\n        (insert {:x 0 :y 0 :data {:i 0}})\n        (insert {:x 1 :y 0 :data {:i 1}})\n        (insert {:x 2 :y 0 :data {:i 2}})\n        (insert {:x 3 :y 0 :data {:i 2}})\n        )\n    )\n\n  (bound-by-depth {:x 4 :y 4} 3)\n\n  (quot 8 8)\n  )\n\n\n"]}