{"version":3,"sources":["conways_game_of_life/util.cljc"],"mappings":";;AAEA,AAAA,AAAMA,AACHC;AADH,AAEE,AAAA,AAAA,AAAA,AAAAC,AAAKD,AAEDE;;AAEN,AAAA,AAAMC,AACHC,AAAKC,AAAKC;AADb,AAEE,AAACC,AAAK,AAAKC;AAAL,AAAQ,AAACD,AAAK,AAAKE;AAAL,AAAQ,AAACH,AAAAA,AAAAA,AAAKG,AAAAA,AAAED,AAAAA;AAAI,AAACE,AAAML;AAAQ,AAACK,AAAMN;;AAEhE,AAAA,AAAMO,AACHC;AADH,AAEE,AAAMH,AAAE,AAAG,AAAAI,AAAU,AAAA,AAAKD;AAAf,AAAA,AAAAC,AAACC;AAAJ;AAAR,AAEE,AAAGL,AAAE,AAACM,AAAWN;;AAErB,AAAA,AAAMO,AACHJ,AAAKK;AADR,AAAA,AAEG,AAACN,AAAcC,AAAM,AAAAM,AAAY,AAACE,AAAIR,AAAKK;AAAtB,AAAA,AAAAC,AAACC;;;AAEzB,AAAA,AAAME,AACHT,AAAKK;AADR,AAEE,AAAAK,AAAe,AAACN,AAAWJ,AAAKK;AAAhC,AAAAM,AAAAD,AAAA,AAAA,AAAOV;AAAP,AAAAW,AAAAD,AAAA,AAAA,AAAYE;AAAZ,AACEZ;;AAGJ,AAAA,AAAMa,AACHC,AAAKC;AADR,AAEE,AAACC,AAAO,AAAAC,AAAKH;AAAL,AAAA,AAAAI,AAAAD;AAAA,AAAAN,AAAAO,AAAA,AAAA,AAAWrB;AAAX,AAAAc,AAAAO,AAAA,AAAA,AAAatB;AAAb,AAAiB,AAAA,AAAA,AAAA,AAACuB,AAASL,AAAMlB,AAAEC;AAAmBiB,AAAKC;;AAErE,AAAA,AAAMK,AACHhC;AADH,AAEE,AAAA,AAAW,AAACD,AAAUC","names":["conways-game-of-life.util/get-state","app-state-atom","cljs.core/deref","cljs.core/last","conways-game-of-life.util/vec2d","rows","cols","init","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","y","x","cljs.core.range.cljs$core$IFn$_invoke$arity$1","conways-game-of-life.util/pseudo-random","seed","G__31517","Math/sin","Math/floor","conways-game-of-life.util/random-int","max","G__31518","Math/round","cljs.core/mod","conways-game-of-life.util/next-seed","vec__31519","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","conways-game-of-life.util/set-initial-shape","grid","shape","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__31522","vec__31523","cljs.core/assoc-in","conways-game-of-life.util/running?"],"sourcesContent":["(ns conways-game-of-life.util)\n\n(defn get-state\n  [app-state-atom]\n  (-> @app-state-atom\n      :states\n      last))\n\n(defn vec2d\n  [rows cols init]\n  (mapv (fn [y] (mapv (fn [x] (init x y)) (range cols))) (range rows)))\n\n(defn pseudo-random\n  [seed]\n  (let [x (* (Math/sin (inc seed))\n             10000)]\n    (- x (Math/floor x))))\n\n(defn random-int\n  [seed max]\n  [(pseudo-random seed) (Math/round (mod seed max))])\n\n(defn next-seed\n  [seed max]\n  (let [[seed _] (random-int seed max)]\n    seed))\n\n\n(defn set-initial-shape\n  [grid shape]\n  (reduce (fn [grid [x y]] (assoc-in grid [y x :cell-state] 1)) grid shape))\n\n(defn running?\n  [app-state-atom]\n  (:running? (get-state app-state-atom)))\n"]}