{"version":3,"sources":["conways_game_of_life/core.cljs"],"mappings":"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","names":["conways-game-of-life.core/blinker","conways-game-of-life.core/vec2d","rows","cols","init","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","y","x","cljs.core.range.cljs$core$IFn$_invoke$arity$1","conways-game-of-life.core/pseudo-random","seed","G__57242","Math/sin","Math/floor","conways-game-of-life.core/random-int","max","G__57243","Math/round","cljs.core/mod","conways-game-of-life.core/next-seed","vec__57244","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","p__57247","map__57248","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.core/seed-grid","grid","state","seed-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","i","cell","vec__57250","random","cljs.core/deref","cljs.core/reset!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","conways-game-of-life.core/set-initial-shape","shape","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__57253","vec__57254","cljs.core/assoc-in","js/conways-game-of-life","js/conways-game-of-life.core","js/conways-game-of-life.core.app-state-atom","conways-game-of-life.core/app-state-atom","conways-game-of-life.core/grid-size","conways-game-of-life.core/initial-state","conways-game-of-life.core/get-state","app-state-atom","cljs.core/last","conways-game-of-life.core/pprint-grid","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","conways-game-of-life.core/px","v","conways-game-of-life.core/wrap","a","max-a","conways-game-of-life.core/neighbours","cljs.core/count","cljs.core/first","iter__4582__auto__","s__57258","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","iterys__4578__auto__","s__57260","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__57262","cljs.core/chunk-buffer","i__57261","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__57259","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4579__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__57257","cljs.core.range.cljs$core$IFn$_invoke$arity$2","j","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.core/alive?","cell-state","conways-game-of-life.core/dead?","p__57263","map__57264","conways-game-of-life.core/world","map__57266","grid-size","cell-size","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__57268","map__57269","cljs.core/flatten","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","conways-game-of-life.core/mutate!","seq57271","G__57272","cljs.core/next","G__57273","self__4776__auto__","pure-fn","mutate-args","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","app-state","current-state","next-state","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.update.cljs$core$IFn$_invoke$arity$3","states","p__57274","map__57275","conways-game-of-life.core/game-of-life","trigger-event","G__57277","G__57278","G__57279","G__57280","conways-game-of-life.core/neighbours->cell-states","neighbours","p__57281","vec__57282","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.core/four-rule","map__57285","cell-states-sum","cljs.core/+","p__57287","map__57288","conways-game-of-life.core/tick","p__57290","map__57291","pred__57293","expr__57294","cljs.core/=","js/conways-game-of-life.core.render-atom","conways-game-of-life.core/render-atom","conways-game-of-life.core/simulate","id","js/requestAnimationFrame","timestamp","h","delta","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","G__57297","conways-game-of-life.core/handle-event!","js/Error","name","data","pred__57298","expr__57299","G__57301","G__57302","G__57303","G__57304","G__57305","G__57306","G__57307","G__57308","conways_game_of_life.core.handle_event_BANG_.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.core/render","reagent.dom.render.cljs$core$IFn$_invoke$arity$2","js/document","cljs.core/add-watch","conways-game-of-life.core/init!","conways-game-of-life.core/reload!","cljs.core/chunk-first"],"sourcesContent":["(ns conways-game-of-life.core\n  (:require\n    [cljs.core.async :as async]\n    [reagent.core :as r]\n    [reagent.dom :as rd]))\n\n;(enable-console-print!)\n\n(def blinker [[1 0] [1 1] [1 2]])\n\n(defn vec2d\n  [rows cols init]\n  (mapv (fn [y] (mapv (fn [x] (init x y)) (range cols))) (range rows)))\n\n(defn pseudo-random\n  [seed]\n  (let [x (* (Math/sin (inc seed))\n             10000)]\n    (- x (Math/floor x))))\n\n(defn random-int\n  [seed max]\n  [(pseudo-random seed) (Math/round (mod seed max))])\n\n(defn next-seed\n  [seed max]\n  (let [[seed _] (random-int seed max)]\n    seed))\n\n(defn seed-grid\n  [{:keys [seed grid] :as state}]\n  (let [seed-atom (atom seed)\n        state (->> (mapv (fn [i]\n                           (mapv (fn [cell]\n                                   (let [[seed random] (random-int @seed-atom 1)]\n                                     (reset! seed-atom seed)\n                                     (assoc cell :cell-state random)))\n                                 i)) grid)\n                   (assoc state :grid))]\n    (assoc state :seed @seed-atom)))\n\n\n(defn set-initial-shape\n  [grid shape]\n  (reduce (fn [grid [x y]]\n            (assoc-in grid [y x :cell-state] 1)) grid shape))\n\n(defonce app-state-atom (atom nil))\n(def grid-size 50)\n(def initial-state\n  {:states [{:cell-size     30                              ;; px\n             :grid-size     grid-size\n             :grid          (-> (vec2d (/ grid-size 2) (/ grid-size 2)\n                                       (fn [x y]\n                                         {:x          x\n                                          :y          y\n                                          :cell-state 0     ;; 0 = dead, 1 = alive\n                                          }))\n                                (set-initial-shape blinker))\n             :seed          1\n             :initial-seed? false\n             :running?      false\n             }]})\n\n(defn get-state\n  [app-state-atom]\n  (-> @app-state-atom\n      :states\n      last))\n\n(defn pprint-grid [grid] (cljs.pprint/pprint grid))\n(defn px [v] (str v \"px\"))\n\n(defn wrap\n  [a max-a]\n  (cond\n    (< a 0) (- max-a a 1)\n    (> a max-a) (mod a (inc max-a))\n    :else a))\n\n(defn neighbours\n  \"Find the 8 members of a given x,y coordinates.\n   The grid is considered to be a toroidal so edges wraps around.\n\n   XXX\n   X.X\n   XXX\n\n   \"\n  [grid x y]\n  (let [rows (-> grid count dec)\n        cols (-> grid first count dec)]\n    (for [i (range (dec y) (+ 2 y))\n          j (range (dec x) (+ 2 x))\n          :when (not (and (= i y) (= j x)))]\n      [(wrap i rows) (wrap j cols)])))\n\n(defn alive?\n  [cell-state]\n  (= 1 cell-state))\n\n(defn dead?\n  [cell-state]\n  (= 0 cell-state))\n\n(defn world\n  [{:keys [state]}]\n  (let [{:keys [grid grid-size cell-size]} state]\n    [:div {:style {:display               \"inline-grid\"\n                   :grid-gap              \"1px\"\n                   :grid-template-columns (str \"repeat(\" (int (/ grid-size 2)) \",\" cell-size \"px)\")\n                   :background-color      \"white\"\n                   :border                \"1px solid black\"}}\n     (map (fn [{:keys [cell-state x y]}]\n            [:div {:key   (str \"cell-\" x \"-\" y)\n                   :style {:outline    \".5px solid lightgray\"\n                           :display    \"inline-block\"\n                           :margin     \"0px\"\n                           :background (if (alive? cell-state) \"black\" \"white\")\n                           :min-width  (px cell-size)\n                           :min-height (px cell-size)}}]) (flatten grid))]))\n\n(defn mutate!\n  [app-state-atom pure-fn & mutate-args]\n  (swap! app-state-atom (fn [app-state]\n                          (let [current-state (last (:states app-state))\n                                next-state (apply pure-fn (conj mutate-args current-state))]\n                            (if (some? next-state)\n                              (update app-state :states (fn [states] (conj states next-state)))\n                              app-state)))\n         (get-state app-state-atom)))\n\n(defn game-of-life\n  [{:keys [state trigger-event]}]\n  [:div\n   [:div {:style {:display     \"block\"\n                  :margin      \"10px\"\n                  :margin-left \"0px\"}}\n    [:button {:on-click (fn [] (trigger-event :seed))} \"seed\"]\n    [:button {:on-click (fn [] (trigger-event :tick))} \"tick\"]\n    [:button {:on-click (fn [] (trigger-event :start))} \"start\"]\n    [:button {:on-click (fn [] (trigger-event :stop))} \"stop\"]]\n   [world {:state state}]\n   ])\n\n(defn neighbours->cell-states\n  [grid neighbours]\n  (mapv (fn [[x y]] (-> (get-in grid [y x]) :cell-state)) neighbours))\n\n(defn four-rule\n  \"\n  Any live cell with fewer than two live neighbours dies, as if by underpopulation.\n  Any live cell with two or three live neighbours lives on to the next generation.\n  Any live cell with more than three live neighbours dies, as if by overpopulation.\n  Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n  \"\n  [grid cell]\n  (let [{:keys [x y cell-state]} cell\n        cell-states-sum (->> (neighbours grid x y)\n                             (neighbours->cell-states grid)\n                             (apply +)\n                             )]\n    (cond\n      ;; solitude\n      (and (alive? cell-state)\n           (< cell-states-sum 2)) (assoc cell :cell-state 0)\n\n      ;; overpopulation\n      (and (alive? cell-state)\n           (> cell-states-sum 3)) (assoc cell :cell-state 0)\n\n      (and (alive? cell-state)\n           (or (= cell-states-sum 2)\n               (= cell-states-sum 3))) cell\n\n      (and (dead? cell-state)\n           (= cell-states-sum 3)) (assoc cell :cell-state 1)\n\n      :else cell)))\n\n(defn tick\n  \"\n   if the sum of all nine fields in a given neighbourhood is three, the inner field state for the next generation will be life;\n   if the all-field sum is four, the inner field retains its current state;\n   and every other sum sets the inner field to death.\n   \"\n  [{:keys [seed grid] :as state}]\n  (let [state (->> (mapv (fn [i]\n                           (mapv (fn [{:keys [x y cell-state] :as cell}]\n                                   (let [cell-states-sum (->> (neighbours grid x y)\n                                                              (neighbours->cell-states grid)\n                                                              (apply +)\n                                                              )]\n\n                                     ;(println cell-states-sum)\n                                     (condp = cell-states-sum\n                                       3 (assoc cell :cell-state 1)\n                                       4 cell\n                                       (assoc cell :cell-state 0)\n                                       )\n                                     ;(four-rule grid cell)\n\n                                     )) i)) grid)\n                   (assoc state :grid))]\n    (assoc state :seed (next-seed seed 1))\n    ))\n\n(defonce render-atom (atom nil))\n(when (nil? @render-atom)\n  (reset! render-atom {:last-timestamp 0\n                       :x-sec          250\n                       :delta          0\n                       :fps            0\n                       }))\n\n(defn simulate\n  []\n  (let [id (atom nil)]\n    (reset! id (js/requestAnimationFrame\n                 (fn h [timestamp]\n                   (when (:running? (get-state app-state-atom))\n\n                     (reset! id (js/requestAnimationFrame h))\n\n                     (when (>= (- timestamp (:last-timestamp @render-atom))\n                               (:x-sec @render-atom))\n\n                       (let [delta (/ (- timestamp (:last-timestamp @render-atom))\n                                      1000)]\n                         (swap! render-atom assoc :last-timestamp timestamp)\n                         (swap! render-atom assoc :delta (/ 1 delta))\n\n                         )\n\n\n                       (mutate! app-state-atom tick)\n                       )\n                     )\n                   )))\n    )\n  )\n\n(defn handle-event!\n  ([name data]\n   (condp = name\n     :tick (mutate! app-state-atom tick)\n     :seed (mutate! app-state-atom seed-grid)\n     :start (mutate! app-state-atom (fn [state]\n                                      (let [state (assoc state :running? true)]\n                                        (js/requestAnimationFrame simulate)\n                                        state\n                                        )\n                                      ))\n     :stop (mutate! app-state-atom (fn [state] (assoc state :running? false)))\n     nil))\n  ([name] (handle-event! name nil)))\n\n(defn render\n  [state]\n  (rd/render [game-of-life {:state         state\n                            :trigger-event handle-event!}]\n             (. js/document (getElementById \"app\"))))\n\n(when (nil? @app-state-atom)\n  (reset! app-state-atom initial-state)\n\n  (when (:initial-seed? (get-state app-state-atom))\n    (mutate! app-state-atom seed-grid))\n\n  (add-watch app-state-atom\n             :game-loop\n             (fn [_ _ _ _]\n               (render (get-state app-state-atom))\n               )))\n\n\n(defn init! [] (render (get-state app-state-atom)))\n(defn reload! [] (render (get-state app-state-atom)))\n\n(comment\n  (let [a (for [x [-1 0 1]\n                y [-1 0 1]\n                :when (not (and (= x 0) (= y 0)))]\n            [x y]\n            )]\n    (println a)\n    )\n\n  (-> (get-state app-state-atom)\n      :grid\n      (set-initial-shape blinker)\n      )\n  )"]}