{"version":3,"sources":["conways_game_of_life/core.cljs"],"mappings":"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","names":["cljs.core/enable-console-print!","js/conways-game-of-life","js/conways-game-of-life.core","js/conways-game-of-life.core.render-atom","conways-game-of-life.core/render-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","js/conways-game-of-life.core.app-state-atom","conways-game-of-life.core/app-state-atom","conways-game-of-life.core/grid-size","conways-game-of-life.core/initial-state","conways-game-of-life.shapes/shapes","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","conways-game-of-life.core/mutate!","seq62032","G__62033","cljs.core/first","cljs.core/next","G__62034","self__4776__auto__","app-state-atom","pure-fn","mutate-args","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","app-state","current-state","cljs.core/last","next-state","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.update.cljs$core$IFn$_invoke$arity$3","states","conways-game-of-life.util/get-state","p__62035","map__62036","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.core/tick","seed","state","conways-game-of-life.gol/inc-grid","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","conways-game-of-life.util/next-seed","G__62039","conways-game-of-life.core/simulate","js/Error","trigger-event","timestamp","conways-game-of-life.util/running?","G__62040","G__62041","js/requestAnimationFrame","conways_game_of_life.core.simulate.cljs$core$IFn$_invoke$arity$2","G__62043","conways-game-of-life.core/handle-event!","name","conways_game_of_life.core.handle_event_BANG_.cljs$core$IFn$_invoke$arity$2","data","map__62044","world-width","cell-size","view","pred__62046","expr__62047","G__62049","G__62050","G__62051","G__62052","G__62053","G__62054","G__62055","G__62056","G__62060","G__62061","cljs.core/=","v","conways-game-of-life.bitbit/step","conways-game-of-life.canvas/draw-rects","conways_game_of_life.core.simulate.cljs$core$IFn$_invoke$arity$1","p__62057","map__62058","grid","cell","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/disj","cljs.core/conj","p__62062","map__62063","conways-game-of-life.core/canvas-handler!","context","pred__62065","expr__62066","G__62068","G__62069","p__62070","map__62071","conways-game-of-life.core/render","conways_game_of_life.canvas.create_canvas.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.canvas/resize-canvas","conways-game-of-life.bitbit/uint-8-view","conways-game-of-life.bitbit/pattern->view","conways-game-of-life.canvas/stroke-style","reagent.dom.render.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.view/game-of-life","js/document","cljs.core/add-watch","_","conways-game-of-life.core/init!","conways-game-of-life.core/reload!"],"sourcesContent":["(ns conways-game-of-life.core\n  (:require\n    ;[conways-game-of-life.canvas-core :as c]\n    [conways-game-of-life.bitbit :as b]\n    [conways-game-of-life.canvas :as c]\n    [conways-game-of-life.shapes :refer [shapes]]\n    [conways-game-of-life.view :refer [game-of-life cell-color]]\n    [conways-game-of-life.gol :refer [inc-grid]]\n    [conways-game-of-life.hashlife :as hl]\n    [conways-game-of-life.util :refer [random-int\n                                       get-state\n                                       set-initial-shape\n                                       running?\n                                       next-seed]]\n    [cljs.core.async :as async]\n    [reagent.core :as r]\n    [reagent.dom :as rd]))\n\n(enable-console-print!)\n\n(defonce render-atom (atom nil))\n(when (nil? @render-atom)\n  (reset! render-atom {:last-timestamp 0\n                       :fps            0}))\n\n(defonce app-state-atom (atom nil))\n(def grid-size 160)                                         ;; px\n(def initial-state\n  {:states [{:cell-size   2                                 ;; px\n             :grid-size   grid-size\n             :grid        (:heavy shapes)\n             ;:grid        (:glider shapes)\n             ;:grid        (:131c31climber shapes)\n             ;:grid        (:144p24 shapes)\n             :world-width 512\n             :seed        1\n             :running?    false\n             :toroidal?   false\n             :fps         0\n             :view        nil\n             }]})\n\n\n\n(defn mutate!\n  [app-state-atom pure-fn & mutate-args]\n  (swap! app-state-atom (fn [app-state]\n                          (let [current-state (last (:states app-state))\n                                next-state (apply pure-fn (conj mutate-args current-state))]\n                            (if (some? next-state)\n                              ; (update app-state :states (fn [states] (conj states next-state)))\n                              (update app-state :states (fn [states] [next-state]))\n\n                              app-state)))\n         (get-state app-state-atom)))\n\n(defn tick\n  [{:keys [seed] :as state}]\n  (let [state (->> (inc-grid state)\n                   (assoc state :grid))]\n    (assoc state :seed (next-seed seed 1))))\n\n(defn simulate\n  ([trigger-event timestamp]\n   (when (running? app-state-atom)\n     ;(swap! render-atom (fn [state]\n     ;                     (let [seconds-passed (/ (- timestamp (:last-timestamp @render-atom)) 1000)]\n     ;                       (-> (assoc state :last-timestamp timestamp)\n     ;                           (assoc :fps (Math/round (/ 1 seconds-passed)))))))\n     ;\n     (trigger-event :tick {:fps (:fps @render-atom)})\n     (js/requestAnimationFrame (fn raf-fn [timestamp] (simulate trigger-event timestamp)))))\n  ([trigger-event] (simulate trigger-event 0)))\n\n(defn handle-event!\n  ([name] (handle-event! name nil))\n  ([name data]\n   (let [{:keys [world-width cell-size view]} (get-state app-state-atom)]\n     (condp = name\n       :tick (let [v (-> (b/step view)\n                         (c/draw-rects world-width cell-size))]\n               (mutate! app-state-atom (fn view-swap [state] (assoc state :view v))))\n       :start (do (mutate! app-state-atom (fn [state] (assoc state :running? true)))\n                  (simulate handle-event!))\n       :stop (mutate! app-state-atom (fn [state] (assoc state :running? false)))\n       :toggle-cell (mutate! app-state-atom (fn [{:keys [grid] :as state}]\n                                              (let [cell (:cell data)]\n                                                (update-in state [:grid] (if (grid cell) disj conj) cell)\n                                                )))\n       :click (mutate! app-state-atom (fn [{:keys [grid cell-size] :as state}]\n                                        (let [\n                                              ;context @c/canvas-atom\n                                              ;cell (c/xy->cell (merge (c/relative-cord (:canvas context) data)\n                                              ;                        {:cell-size (:cell-size (get-state app-state-atom))}))\n                                              ;state (update-in state [:grid] (if (grid cell) disj conj) cell)\n                                              ]\n                                          ;(c/draw-cell! {:ctx        (:ctx context)\n                                          ;               :cell       (mapv #(* cell-size %) cell)\n                                          ;               :size       cell-size\n                                          ;               :fill-color (cell-color state cell)})\n                                          ;state\n                                          )))\n\n       nil))))\n\n(defn canvas-handler!\n  [context]\n  (fn [name data]\n    (condp = name\n      :click\n      nil)))\n\n(defn render\n  [{:keys [world-width cell-size] :as state}]\n\n  (c/create-canvas 1024 1024)\n  (c/resize-canvas)\n  ;(c/empty-img!)\n\n  ;(println js/window.he)\n\n  (let [view (->> (b/uint-8-view (* world-width world-width))\n                  (b/pattern->view (:grid (get-state app-state-atom))))]\n\n    (mutate! app-state-atom (fn [state] (assoc state :view view)))\n\n    (c/stroke-style \"#fff\")\n\n    (-> view\n        ;    b/step\n        ;    b/step\n        ;    b/step\n        ;    b/step\n        (c/draw-rects world-width cell-size)\n        )\n    ;(println (b/step view))\n    )\n\n\n  (rd/render [game-of-life {:state         state\n                            :trigger-event handle-event!}]\n             (. js/document (getElementById \"app\"))))\n\n(when (nil? @app-state-atom)\n  (reset! app-state-atom initial-state)\n\n\n  (add-watch app-state-atom\n             :game-loop\n             (fn [_ _ _ _]\n               ;(render (get-state app-state-atom))\n               )))\n\n(defn init! [] (render (get-state app-state-atom)))\n(defn reload! [] (render (get-state app-state-atom)))\n\n\n(comment\n  (reset! app-state-atom initial-state)\n  ;; 1976.845000 msecs\n  (time (handle-event! :tick)))\n"]}