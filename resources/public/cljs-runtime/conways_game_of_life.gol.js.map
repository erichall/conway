{"version":3,"sources":["conways_game_of_life/gol.cljc"],"mappings":"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","names":["conways-game-of-life.gol/wrap","a","size","cljs.core/mod","conways-game-of-life.gol/dx","conways-game-of-life.gol/dy","p__31085","vec__31086","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","conways-game-of-life.gol/neighbours","toroidal?","x","y","iter__4582__auto__","s__31090","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4578__auto__","s__31092","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__31094","cljs.core/chunk-buffer","i__31093","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__31091","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4579__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__31089","dx","dy","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__31095","map__31096","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.gol/inc-grid","grid","grid-size","state","neighbours","cell","n","s__31099","b__31101","i__31100","vec__31102","iter__31098","vec__31105","n-neighbours","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/frequencies","or__4185__auto__","cljs.core/set","cljs.core/chunk-first"],"sourcesContent":["(ns conways-game-of-life.gol)\n\n(defn wrap\n  [a size]\n  (mod (+ a size) size))\n\n(def dx [-1 0 1])\n(def dy [-1 0 1])\n\n(defn neighbours\n  \"Find the 8 members of a given x,y coordinates.\n   The grid is considered to be a toroidal so edges wraps around.\n\n   XXX\n   X.X\n   XXX\n\n   \"\n  [size toroidal? [x y]]\n  (for [dx dx\n        dy dy\n        :when (not (= [0 0] [dx dy]))]\n    (do\n      (if toroidal?\n        [(wrap (+ dx x) size) (wrap (+ dy y) size)]\n        [(+ dx x) (+ dy y)]))))\n\n(defn inc-grid\n  [{:keys [grid grid-size toroidal?] :as state}]\n  (let [size (/ grid-size 2)\n        neighbours (fn [cell]\n                     (let [n (neighbours size toroidal? cell)]\n                       n))]\n    (-> (for [[cell n-neighbours] (->> grid\n                                       (mapcat neighbours)\n                                       frequencies)\n              :when (or (= n-neighbours 3)                  ;; bring back to life\n                        (and (= n-neighbours 2) (grid cell)))] ;; it's alive with 2 bros\n          cell)\n        set)))\n\n\n"]}