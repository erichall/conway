{"version":3,"sources":["conways_game_of_life/bitbit.cljs"],"mappings":"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","names":["conways-game-of-life.bitbit/uint-8-view","size","buffer","js/ArrayBuffer","js/Uint8Array","conways-game-of-life.bitbit/write-value","view","index","value","conways-game-of-life.bitbit/set-bit","position","bit-value","mask","conways-game-of-life.bitbit/get-bit","b","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.bitbit/set-cell-state","uint-8-value","cell-state","conways-game-of-life.bitbit/get-cell-state","cell","conways-game-of-life.bitbit/get-cell","i","conways-game-of-life.bitbit/value->binary","v","conways-game-of-life.bitbit/two-d->one-d","x","y","w","conways-game-of-life.bitbit/one-d->two-d","cljs.core/mod","G__61794","Math/floor","conways-game-of-life.bitbit/alive-mask","conways-game-of-life.bitbit/alive?","conways-game-of-life.bitbit/world-width","G__61795","Math/sqrt","conways-game-of-life.bitbit/dd","conways-game-of-life.bitbit/get-neighbourhood-coordinates","iter__4582__auto__","s__61797","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4578__auto__","s__61799","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__61801","cljs.core/chunk-buffer","i__61800","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__61798","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4579__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__61796","dx","dy","conways-game-of-life.bitbit/dec-neighbour","conways-game-of-life.bitbit/inc-neighbour","conways-game-of-life.bitbit/wrap","a","conways-game-of-life.bitbit/pprint-view","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/sorted-map","cljs.core/second","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__61802","vec__61803","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","r","s","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$1","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","l","cljs.core/val","conways-game-of-life.bitbit/neighbour-operator","neighbours","world-width","operator-fn","neighbour","nx","ny","ni","conways-game-of-life.bitbit/dec-neighbours","conways-game-of-life.bitbit/inc-neighbours","conways-game-of-life.bitbit/alive-neighbours","c","n","conways-game-of-life.bitbit/kill-cell","vec__61806","alive-c","conways-game-of-life.bitbit/awake-cell","vec__61809","conways-game-of-life.bitbit/step","mutating-view","fixed-view","a__4663__auto__","l__4664__auto__","_","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.bitbit/pattern->view","pattern","p__61812","vec__61813","seq__61816","chunk__61817","count__61818","i__61819","c__4609__auto__","cljs.core/chunk-first","cljs.core/next","vec__61826","vec__61829","conways-game-of-life.bitbit/view->pattern","cljs.core/transient","cljs.core/persistent!","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns conways-game-of-life.bitbit)\n\n(defn uint-8-view\n  [size]\n  (let [buffer (js/ArrayBuffer. size)]\n    (js/Uint8Array. buffer)))\n\n(defn write-value\n  \"Mutates `view` by `value` at `index` and returns the view.\n  WARNING, it __mutates__ the view.\"\n  [view index value]\n  (aset view index value)\n  view)\n\n(defn set-bit\n  \"Sets the bit at `position` in `value` to `bit-value`\"\n  [value position bit-value]\n  (let [mask (bit-shift-left 1 position)]\n    (bit-or\n      (bit-and value (bit-not mask))\n      (bit-shift-left bit-value position))))\n\n(defn get-bit\n  [value position]\n  (let [b (bit-and value (bit-shift-left 1 position))]\n    (if (= b 0) 0 1)))\n\n(defn set-cell-state\n  \"First of the 8 bit value is the cell-state\"\n  [uint-8-value cell-state]\n  (set-bit uint-8-value 0 cell-state))\n\n(defn get-cell-state\n  [cell]\n  (get-bit cell 0))\n\n(defn get-cell\n  [view i]\n  (aget view i))\n\n(defn value->binary\n  [v]\n  (.toString v 2))\n\n(defn two-d->one-d\n  [x y w]\n  (+ (* w y) x))\n\n(defn one-d->two-d\n  [i w]\n  [(mod i w) (Math/floor (/ i w))])\n\n(def alive-mask 1)\n(defn alive?\n  [cell]\n  (= (bit-and cell alive-mask) 1))\n\n(defn world-width\n  [view]\n  (Math/sqrt (.-length view)))\n\n(def dd [-1 0 1])\n(defn get-neighbourhood-coordinates\n  [x y]\n  (for [dx dd\n        dy dd\n        :when (not (and (= dx 0) (= dy 0)))]\n    [(+ x dx) (+ y dy)]))\n\n(defn dec-neighbour\n  [cell]\n  (- cell 2))\n\n(defn inc-neighbour\n  [cell]\n  (+ cell 2))\n\n(defn wrap\n  [a size]\n  (mod (+ a size) size))\n\n(defn pprint-view\n  [view]\n  (let [w (into (sorted-map)\n                (second\n                  (reduce (fn [[r s] i]\n                            (if (= (mod i (world-width view)) 0)\n                              [(inc r) (assoc s (keyword (str (inc r))) (str \" [\" (bit-shift-right (aget view i) 1) \", \" (get-cell-state (aget view i)) \" , \" (aget view i) \"]\"))]\n                              [r (assoc s (keyword (str r)) (str (get s (keyword (str r))) \" [\" (bit-shift-right (aget view i) 1) \", \" (get-cell-state (aget view i)) \", \" (aget view i) \"]\"))])\n                            ) [0 {}] (range (.-length view)))))]\n    (println (reduce (fn [s l] (str s (val l) \"\\n\")) \"\" w))))\n\n(defn neighbour-operator\n  [view neighbours world-width operator-fn]\n  (reduce (fn [view neighbour]\n            (let [nx (wrap (first neighbour) world-width)\n                  ny (wrap (second neighbour) world-width)\n                  ni (two-d->one-d nx ny world-width)\n                  cell (get-cell view ni)]\n              (write-value view ni (operator-fn cell))))\n          view neighbours))\n\n(defn dec-neighbours\n  [view neighbours world-width]\n  (neighbour-operator view\n                      neighbours\n                      world-width\n                      (fn [cell] (dec-neighbour cell))))\n\n(defn inc-neighbours\n  [view neighbours world-width]\n  (neighbour-operator view\n                      neighbours\n                      world-width\n                      (fn [cell] (inc-neighbour cell))))\n\n(defn alive-neighbours\n  [view neighbours]\n  (reduce (fn [c n]\n            (let [w (world-width view)\n                  x (wrap (first n) w)\n                  y (wrap (second n) w)]\n              (if (-> (get-cell view (two-d->one-d x y w))\n                      alive?)\n                (inc c)\n                c))) 0 neighbours))\n\n(defn kill-cell\n  \"Set the cell state to 0 and decrement the counter for each neighbour.\"\n  [view cell i]\n  (let [w (world-width view)\n        [x y] (one-d->two-d i w)\n        neighbours (get-neighbourhood-coordinates x y)\n        alive-c (alive-neighbours view neighbours)]\n    (-> view\n        (write-value i (set-cell-state (bit-shift-left alive-c 1) 0))\n        (dec-neighbours neighbours w))))\n\n(defn awake-cell\n  \"Set the cell to 1 and increment the counter for each neighbour.\"\n  [view i]\n  (let [w (world-width view)\n        [x y] (one-d->two-d i w)\n        neighbours (get-neighbourhood-coordinates x y)\n        alive-c (alive-neighbours view neighbours)]\n    (-> view\n        (write-value i (set-cell-state (bit-shift-left alive-c 1) 1))\n        (inc-neighbours neighbours w))))\n\n(defn step\n  [mutating-view]\n\n  ;(println \"A step..\")\n  ;(pprint-view mutating-view)\n\n  (let [fixed-view (.slice mutating-view)]                  ;; this is the not modified view that we operate with\n    (areduce mutating-view i _ 0\n             (let [cell (get-cell fixed-view i)]\n               ;; off-cell with no neighbours, we just skip  this\n               (when (not= cell 0)\n                 (let [c (bit-shift-right cell 1)]\n                   (if (alive? cell)\n                     ;; it's alive, we should kill it if it does not have 2 or 3 neighbours\n                     (when (and (not= c 2) (not= c 3))\n                       (kill-cell mutating-view cell i))\n                     ;; otherwise the cell is off, it should turn on if it has 3 alive neighbours\n                     (when (= c 3)\n                       (awake-cell mutating-view i))\n                     )\n                   )))\n             )\n    )\n  ;; return the mutated view\n  mutating-view\n  )\n\n(defn pattern->view\n  \"`pattern` list of tuples with x,y coordinates,\n  assign these coordinates into the `view` to turn these\n  cells alive. Assume the world is square\"\n  [pattern view]\n  (let [w (world-width view)\n        view (reduce (fn [view [x y]]\n                       (let [i (two-d->one-d x y w)]\n                         (->> (set-cell-state view 1)\n                              (write-value view i)))) view pattern)\n        fixed-view (.slice view)]\n    (doseq [i (range (.-length view))]\n      (let [cell (get-cell fixed-view i)]\n        (when (= cell 1)\n          (let [[x y] (one-d->two-d i w)\n                n (get-neighbourhood-coordinates x y)]\n            (inc-neighbours view n w))\n          ))))\n  view)\n\n(defn view->pattern\n  \"Returns the alive cells as x,y coordinates, dead ones are excluded\"\n  [view]\n  (let [pattern (transient [])\n        w (world-width view)]\n    (persistent!\n      (reduce (fn [pattern i]\n                (let [s (get-cell-state (get-cell view i))]\n                  (if (= 1 s)\n                    (conj! pattern (one-d->two-d i w))\n                    pattern))\n                ) pattern (range (.-length view))))\n    ))\n\n"]}