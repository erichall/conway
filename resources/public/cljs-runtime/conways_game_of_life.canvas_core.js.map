{"version":3,"sources":["conways_game_of_life/canvas_core.cljs"],"mappings":"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","names":["conways-game-of-life.canvas-core/add-event!","canvas","event-name","chan","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","evt","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","conways-game-of-life.canvas-core/relative-cord","left","top","conways-game-of-life.canvas-core/canvas-handler","handler","chans","c","cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1","c__25860__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__25861__auto__","switch__25739__auto__","state_28348","state_val_28349","inst_28335","statearr-28350","statearr-28351","statearr-28352","inst_28319","inst_28321","inst_28322","cljs.core/not","statearr-28353","statearr-28354","statearr-28355","inst_28340","inst_28341","cljs.core.get.cljs$core$IFn$_invoke$arity$2","inst_28342","inst_28343","statearr-28356","statearr-28357","statearr-28358","inst_28346","cljs.core.async.impl.ioc-helpers/return-chan","statearr-28359","cljs.core.async.impl.ioc-helpers/take!","inst_28337","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","statearr-28360","statearr-28361","inst_28324","inst_28325","inst_28326","inst_28327","cljs.core/PROTOCOL_SENTINEL","inst_28328","statearr-28362","statearr-28363","inst_28332","statearr-28364","statearr-28365","statearr-28366","state-machine__25740__auto__","ret-value__25741__auto__","result__25742__auto__","cljs.core/keyword-identical?","e28367","js/Object","ex__25743__auto__","statearr-28368","cljs.core.async.impl.ioc-helpers/process-exception","state__25862__auto__","statearr-28369","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","conways-game-of-life.canvas-core/canvas","js/document","conways-game-of-life.canvas-core/initial-state","cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$variadic","js/conways-game-of-life","js/conways-game-of-life.canvas-core","js/conways-game-of-life.canvas-core.canvas-atom","conways-game-of-life.canvas-core/canvas-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","p__28370","map__28371","conways-game-of-life.canvas-core/draw-cell!","ctx","size","cell","fill-color","batch?","vec__28373","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","x","y","p__28377","map__28378","conways-game-of-life.canvas-core/draw-cells!","cell-color-fn","context","args","js/console.log","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__28381","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__28383","cljs.core/chunk-buffer","i__28382","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28380","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","canvas-cell","p1__28376#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__28384","map__28385","conways-game-of-life.canvas-core/draw-grid-lines!","width","height","cell-size","s__28388","b__28390","i__28389","iter__28387","cljs.core.range.cljs$core$IFn$_invoke$arity$3","s__28392","b__28394","i__28393","iter__28391","p__28395","map__28396","conways-game-of-life.canvas-core/draw-grid!","_","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","state","start__4679__auto__","cljs.core/system-time","ret__4680__auto__","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","s__28399","xs__6292__auto__","iterys__4578__auto__","s__28401","b__28403","i__28402","iter__28400","fs__4579__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__28398","cljs.core.range.cljs$core$IFn$_invoke$arity$1","G__28404","G__28405","p__28406","map__28407","conways-game-of-life.canvas-core/xy->cell","G__28409","Math/floor","G__28410","conways-game-of-life.canvas-core/create-dom-canvas!","id","target","canvas?","cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic","js/document.createElement","cljs.core/chunk-first"],"sourcesContent":["(ns conways-game-of-life.canvas-core\n  (:require [cljs.core.async :as a]))\n\n(defn add-event!\n  [canvas event-name]\n  (let [chan (a/chan)]\n    (.addEventListener canvas event-name (fn [evt] (a/put! chan {:name (keyword event-name) :data evt})) false)\n    chan))\n\n(defn relative-cord\n  [canvas evt]\n  (let [left (+ (.-offsetLeft canvas)\n                (.-clientLeft canvas))\n        top (+ (.-offsetTop canvas)\n               (.-clientTop canvas))]\n    {:x (- (.-pageX evt) left)\n     :y (- (.-pageY evt) top)}))\n\n(defn canvas-handler\n  [handler chans]\n  (let [c (a/merge chans)]\n    (a/go-loop\n      []\n      (let [{:keys [name data]} (a/<! c)]\n        (handler name data)\n        (recur)))))\n\n(def canvas (.getElementById js/document \"conway-canvas\"))\n(def initial-state\n  {:canvas canvas\n   :width  (.-width canvas)\n   :height (.-height canvas)\n   :ctx    (.getContext canvas \"2d\" (clj->js \"alpha\" false))})\n(defonce canvas-atom (atom nil))\n\n(when (nil? @canvas-atom)\n  (reset! canvas-atom initial-state))\n\n\n(defn draw-cell!\n  [{:keys [ctx size cell fill-color batch?]}]\n  (let [[x y] cell]\n\n    ;; batch??\n    (when-not batch?\n      (.beginPath ctx))\n\n    (set! (.-fillStyle ctx) fill-color)\n    (.fillRect ctx (+ 0.5 x) (+ 0.5 y) (- size 1) (- size 1))\n\n    ;; batch??\n    (when-not batch?\n      (.fill ctx))\n\n    ;(set! (.-lineWidth ctx) 0.5)\n    ;(set! (.-strokeStyle ctx) \"gray\")\n    ))\n\n(defn draw-cells!\n  [{:keys [size cell-color-fn context] :as args}]\n  (let [ctx (:ctx context)]\n\n    ;(.beginPath ctx)\n    (js/console.log (:image-data context))\n\n    (doall\n      (for [cell (:cells args)\n            :let [canvas-cell (mapv #(* size %) cell)]]\n        (draw-cell! (-> (assoc args :cell canvas-cell)\n                        (assoc :ctx ctx)\n                        (assoc :batch true)\n                        (assoc :fill-color (cell-color-fn cell))))))\n\n    ;(.stroke ctx)\n    (.fill ctx))\n  )\n\n;(defn set-canvas-height! [canvas h] (set! (.-height canvas) h))\n;(defn set-canvas-width! [canvas w] (set! (.-width canvas) w))\n\n(defn draw-grid-lines!\n  [{:keys [ctx width height cell-size]}]\n\n  (set! (.-lineWidth ctx) 1)\n  (set! (.-strokeStyle ctx) \"gray\")\n\n  (doall\n    (for [x (range 0.5 width cell-size)]\n      (do\n        (.moveTo ctx x 0)\n        (.lineTo ctx x height)\n        ;(.stroke ctx)\n        )))\n\n  (doall\n    (for [y (range 0.5 height cell-size)]\n      (do\n        (.moveTo ctx 0 y)\n        (.lineTo ctx width y)\n        ;(.stroke ctx)\n        )\n      )\n    )\n\n  (.stroke ctx)\n  )\n\n(defn draw-grid!\n  [{:keys [width height context cell-size cell-color-fn]}]\n\n  (let [height (+ 1 height)\n        width (+ 1 width)\n        canvas (:canvas context)\n        _ (println context)\n        ctx (:ctx context)]\n\n    (set! (.-height canvas) height)\n    (set! (.-width canvas) width)\n\n    (swap! canvas-atom (fn [state] (-> (assoc state :width width)\n                                       (assoc :height height))))\n\n    (set! (.-border (.-style canvas)) \"dotted 1px blue\")\n\n    ;(.translate (:ctx context) 0.5 0.5)\n\n    ;;\"Elapsed time: 1272.370000 msecs\"\n    (.beginPath ctx)\n\n    (time\n      (doall\n        (for [y (range height)\n              x (range width)]\n\n          (draw-cell! {:ctx        ctx\n                       :cell       [(* cell-size x) (* cell-size y)]\n                       :batch      true\n                       :size       cell-size\n                       :fill-color (cell-color-fn [x y])}))))\n\n    (draw-grid-lines! {:ctx       ctx\n                       :width     width\n                       :height    height\n                       :cell-size cell-size})\n\n    (.fill ctx)\n    )\n\n  )\n\n(defn xy->cell\n  [{:keys [cell-size x y]}]\n  [(Math/floor (/ x cell-size)) (Math/floor (/ y cell-size))])\n\n(defn create-dom-canvas!\n  [width height id target]\n  (let [canvas? (js-invoke js/document \"getElementById\" id)]\n    (when-not canvas?\n      (let [canvas (js/document.createElement \"canvas\")]\n        (do\n          (.setAttribute canvas \"id\" id)\n          (.setAttribute canvas \"height\" height)\n          (.setAttribute canvas \"width\" width)\n          (.appendChild target canvas))))))\n\n"]}