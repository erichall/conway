{"version":3,"sources":["conways_game_of_life/hashlife.cljc"],"mappings":"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","names":["conways-game-of-life.hashlife/dx","conways-game-of-life.hashlife/dy","p__89566","map__89567","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.hashlife/neighbours","x","y","c","iter__4582__auto__","s__89570","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4578__auto__","s__89572","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__89574","cljs.core/chunk-buffer","i__89573","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__89571","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4579__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__89569","dx","dy","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.hashlife/dead","conways-game-of-life.hashlife/alive","cell","conways-game-of-life.hashlife/life","nw","nn","ne","ww","cc","ee","sw","ss","se","count","p__89582","map__89583","conways-game-of-life.hashlife/depth-two->matrix","p__89585","map__89586","conways-game-of-life.hashlife/depth-two->list","p__89588","map__89589","conways-game-of-life.hashlife/to-1d","Math/abs","conways-game-of-life.hashlife/get-cell","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__89591","G__89592","Math/min","Math/max","G__89593","G__89594","conways-game-of-life.hashlife/list->center","l","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","p__89599","map__89600","conways-game-of-life.hashlife/get-center","conways_game_of_life.quadtree.make_node.cljs$core$IFn$_invoke$arity$4","conways-game-of-life.hashlife/node->list","tree","var_args","G__89603","conways-game-of-life.hashlife/tree->cells","js/Error","p__89604","map__89605","conways_game_of_life.hashlife.tree__GT_cells.cljs$core$IFn$_invoke$arity$3","depth","path","cells","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/some?","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","conways-game-of-life.hashlife/base-case","survive?","birth?","conways_game_of_life.hashlife.tree__GT_cells.cljs$core$IFn$_invoke$arity$1","p","cljs.core.map.cljs$core$IFn$_invoke$arity$2","n","conways-game-of-life.quadtree/find-leaf","p__89614","map__89618","cljs.core/second","live?","or__4185__auto__","cljs.core/assoc-in","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","t","cljs.core/reverse","conways-game-of-life.hashlife/find-nw","conways-game-of-life.hashlife/find-nn","conways_game_of_life.quadtree.make_node.cljs$core$IFn$_invoke$arity$5","conways-game-of-life.hashlife/find-ne","conways-game-of-life.hashlife/find-ww","conways-game-of-life.hashlife/find-cc","conways-game-of-life.hashlife/find-ee","conways-game-of-life.hashlife/find-sw","conways-game-of-life.hashlife/find-ss","conways-game-of-life.hashlife/find-se","js/conways-game-of-life","js/conways-game-of-life.hashlife","js/conways-game-of-life.hashlife.db-v6","conways-game-of-life.hashlife/db-v6","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","conways-game-of-life.hashlife/next-generation-v6","cljs.core/deref","sub-depth","b","w","G__89637","G__89638","G__89642","G__89643","G__89644","G__89645","G__89646","G__89647","G__89648","G__89649","G__89650","G__89651","G__89652","calc","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core/hash","conways-game-of-life.hashlife/memo-next-generation-v6","cljs.core/memoize","conways-game-of-life.hashlife/cell-generator","alive-cells","cljs.core.sort.cljs$core$IFn$_invoke$arity$2","a","cljs.core/compare","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","i","j","ii","cljs.core/some","cljs.core.range.cljs$core$IFn$_invoke$arity$1","cljs.core/flatten","conways-game-of-life.hashlife/grow-tree","deeper-tree","conways-game-of-life.hashlife/->1d","conways-game-of-life.hashlife/glider","p__89657","map__89658","conways-game-of-life.hashlife/step","world-width","center","conways-game-of-life.quadtree/insert-cells","p__89663","map__89664","data","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","p__89660","map__89661","cljs.core/chunk-first"],"sourcesContent":["(ns conways-game-of-life.hashlife\n  (:require [conways-game-of-life.quadtree :as q]\n            [clojure.pprint :refer [pprint]]))\n\n(def dx [-1 0 1])\n(def dy [-1 0 1])\n\n(defn neighbours\n  [{:keys [x y] :as c}]\n  (for [dx dx\n        dy dy\n        :when (not (= [0 0] [dx dy]))]\n    [(+ dx x) (+ dy y)]))\n\n(def dead 0)\n\n(defn alive\n  [cell]\n  (- cell dead))\n\n(defn life\n  [nw nn ne\n   ww cc ee\n   sw ss se]\n  (let [count (+ (alive nw) (alive nn) (alive ne)\n                 (alive ww) 0 (alive ee)\n                 (alive sw) (alive ss) (alive se))]\n    (if (= count 2)\n      (= cc 1)\n      (= count 3))))\n\n(defn depth-two->matrix\n  \"Casts a depth 2 tree into a 2d matrix\"\n  [{:keys [nw ne se sw]}]\n  [[(:nw nw) (:ne nw) (:nw ne) (:ne ne)]\n   [(:sw nw) (:se nw) (:sw ne) (:se ne)]\n   [(:nw sw) (:ne sw) (:nw se) (:ne se)]\n   [(:sw sw) (:se sw) (:sw se) (:se se)]])\n\n(defn depth-two->list\n  [{:keys [nw ne se sw]}]\n  [(:nw nw) (:ne nw) (:nw ne) (:ne ne)\n   (:sw nw) (:se nw) (:sw ne) (:se ne)\n   (:nw sw) (:ne sw) (:nw se) (:ne se)\n   (:sw sw) (:se sw) (:sw se) (:se se)])\n\n(comment\n  (frequencies (mapcat neighbours (depth-two->list t)))\n\n  (depth-two->list t)\n\n  (map (fn [row]\n         (map (fn [cell]\n\n                ) row)\n         ) t)\n  )\n\n(defn to-1d\n  [{:keys [x y]}]\n  (+ (* 3 (Math/abs x)) (Math/abs y)))\n\n(defn get-cell\n  [c x y]\n  (if (get-in c [(Math/min (Math/max y 0) 8) (Math/min (Math/max x 0) 8) :data :alive?])\n    1\n    0))\n\n(defn list->center\n  \"From a list with cells of depth two, return the center cells\"\n  [l]\n  [(nth l 5) (nth l 6)\n   (nth l 9) (nth l 10)])\n\n(defn get-center\n  [{:keys [nw ne se sw]}]\n  (q/make-node (:se nw) (:sw ne) (:nw se) (:ne sw)))\n\n\n(defn node->list\n  [tree]\n  [(:nw tree) (:ne tree) (:se tree) (:sw tree)])\n\n;(defn tree->cells\n;  [tree]\n;  (loop [[node & nodes] (node->list tree)\n;         cells #{}]\n;    (cond\n;      (= (:depth node) 1) (recur nodes (filter some? (conj cells (:nw node) (:ne node) (:se node) (:sw node))))\n;      node (recur (concat nodes (node->list node)) cells)\n;      :else cells)))\n\n(defn tree->cells\n  ([tree] (tree->cells tree nil []))\n  ([{:keys [nw ne se sw depth] :as tree} path cells]\n   (cond\n     (nil? tree) cells\n     (= depth 1) (conj cells\n                       (if (or (nil? nw) (nil? (:x nw))) [] (assoc nw :path (conj path :nw)))\n                       (if (or (nil? ne) (nil? (:x ne))) [] (assoc ne :path (conj path :ne)))\n                       (if (or (nil? se) (nil? (:x se))) [] (assoc se :path (conj path :se)))\n                       (if (or (nil? sw) (nil? (:x sw))) [] (assoc sw :path (conj path :sw))))\n     :else (filter some? (concat cells\n                                 (tree->cells nw (conj path :nw) cells)\n                                 (tree->cells ne (conj path :ne) cells)\n                                 (tree->cells se (conj path :se) cells)\n                                 (tree->cells sw (conj path :sw) cells))))))\n\n(conj nil :pop)\n\n(defn base-case\n  [tree survive? birth?]\n  (let [cells (tree->cells tree)\n        p (map (fn [cell]\n                 (let [n (->> (neighbours cell)\n                              (map (fn [ne] (q/find-leaf tree (fn [{:keys [x y]}]\n                                                                (and (= x (first ne))\n                                                                     (= y (second ne)))))))\n                              (filter (fn [c] (get-in c [:data :alive?])))\n                              count)\n                       live? (or (= n 3)\n                                 (and (= n 2)\n                                      (get-in cell [:data :alive?])))]\n                   (assoc-in cell [:data :alive?] live?))) cells)\n        ]\n    ;(println \"We do insert these again \" p (:depth tree) (:bounds tree))\n    (let [c (reduce (fn [t cell]\n                      (assoc-in t (reverse (:path cell)) cell))\n                    {:depth  (:depth tree)\n                     :bounds (:bounds tree)}\n                    p)]\n      (get-center c)\n      ))\n  )\n\n(defn find-nw [tree] (:nw tree))\n(defn find-nn [tree] (-> (q/make-node (get-in tree [:nw :ne]) (get-in tree [:ne :nw]) (get-in tree [:ne :sw]) (get-in tree [:nw :se]) (- (:depth tree) 1))\n                         (assoc :bounds (:bounds tree))))\n(defn find-ne [tree] (:ne tree))\n(defn find-ww [tree] (-> (q/make-node (get-in tree [:nw :sw]) (get-in tree [:nw :se]) (get-in tree [:sw :ne]) (get-in tree [:sw :nw]) (- (:depth tree) 1))\n                         (assoc :bounds (:bounds tree))))\n(defn find-cc [tree] (-> (q/make-node (get-in tree [:nw :se]) (get-in tree [:ne :sw]) (get-in tree [:se :nw]) (get-in tree [:sw :ne]) (- (:depth tree) 1))\n                         (assoc :bounds (:bounds tree))))\n(defn find-ee [tree] (-> (q/make-node (get-in tree [:ne :sw]) (get-in tree [:ne :se]) (get-in tree [:se :ne]) (get-in tree [:se :nw]) (- (:depth tree) 1))\n                         (assoc :bounds (:bounds tree))))\n(defn find-sw [tree] (:sw tree))\n(defn find-ss [tree] (-> (q/make-node (get-in tree [:sw :ne]) (get-in tree [:se :nw]) (get-in tree [:se :sw]) (get-in tree [:sw :se]) (- (:depth tree) 1))\n                         (assoc :bounds (:bounds tree))))\n(defn find-se [tree] (:se tree))\n\n(defonce db-v6 (atom {}))\n(defn next-generation-v6\n  [tree]\n  {:pre [(not (nil? tree))]}\n  (cond\n    ;; cache\n    (get @db-v6 tree) (get @db-v6 tree)\n\n    (= (:depth tree) 2) (base-case tree nil nil)\n    :else\n    (let [\n          sub-depth (- (:depth tree) 1)\n          b (:bounds tree)\n          w (/ (:width (:bounds tree)) 2)\n          ;; first find all n-1 sub-squares then calculate the n-2 results\n          ;; these are all the 9 2x2 squares...\n          nw (-> (find-nw tree) next-generation-v6)\n          nn (-> (find-nn tree) next-generation-v6)\n          ne (-> (find-ne tree) next-generation-v6)\n\n          ww (-> (find-ww tree) next-generation-v6)\n          cc (-> (find-cc tree) next-generation-v6)\n          ee (-> (find-ee tree) next-generation-v6)\n\n          sw (-> (find-sw tree) next-generation-v6)\n          ss (-> (find-ss tree) next-generation-v6)\n          se (-> (find-se tree) next-generation-v6)\n\n          ;; now, construct the overlapping n-1 squares and calculate theirs n-2 results\n          ;; these are the 4x4 squares.\n\n\n          nw (-> (q/make-node nw nn cc ww sub-depth) next-generation-v6)\n          ne (-> (q/make-node nn ne ee cc sub-depth) next-generation-v6)\n          sw (-> (q/make-node ww cc ss sw sub-depth) next-generation-v6)\n          se (-> (q/make-node cc ee se ss sub-depth) next-generation-v6)\n\n          calc (-> (q/make-node nw ne se sw)\n                   (assoc :bounds (assoc b :width w)))\n          ]\n\n      (swap! db-v6 assoc (hash tree) calc)\n\n      calc\n\n      )))\n\n(def memo-next-generation-v6 (memoize next-generation-v6))\n\n(defn cell-generator\n  [n alive-cells]\n  (sort (fn [a b] (compare (get-in a [:data :i])\n                           (get-in b [:data :i])))\n        (-> (mapv (fn [i]\n                    (mapv (fn [j]\n                            (let [ii (+ j (* i n))]\n                              {:x j :y i :data {:i      ii\n                                                :alive? (some (fn [c] (= [j i] c)) alive-cells)}})) (range n))\n                    ) (range n))\n            flatten)))\n\n(defn grow-tree\n  \"Grows a tree upwards, make it one depth deeper if that makes sense?\"\n  [tree]\n  (let [cells (tree->cells tree)\n        deeper-tree {:depth  (inc (:depth tree))\n                     :bounds {:x     (get-in tree [:bounds :x])\n                              :y     (get-in tree [:bounds :y])\n                              :width (* 2 (get-in tree [:bounds :width]))}}]\n    ;(q/insert-cells deeper-tree cells)\n    deeper-tree\n    ))\n\n\n\n(defn ->1d\n  [x y w]\n  (+ x (* y w)))\n\n(def glider\n  [{:x 2 :y 2 :data {:i (->1d 2 2 8)}}\n   {:x 4 :y 2 :data {:i (->1d 4 2 8)}}\n   {:x 3 :y 3 :data {:i (->1d 3 3 8)}}\n   {:x 4 :y 3 :data {:i (->1d 4 3 8)}}\n   {:x 3 :y 4 :data {:i (->1d 3 4 8)}}])\n\n(defn step\n  [{:keys [depth world-width center cells]}]\n  (->> (cell-generator world-width cells)\n       (q/insert-cells {:depth depth :bounds {:x center :y center :width center}})\n       next-generation-v6\n       tree->cells\n       (filter (fn [{:keys [data]}]\n                 (println \"Alive?\" data)\n                 (:alive? data)))\n       (map (fn [{:keys [x y]}] [x y]))))\n\n(comment\n  ;; 8x8    --> depth = 3\n  ;; 16x16  --> depth = 4\n  ;; 32x32  --> depth = 5\n  (let [depth 3\n        c 4\n        cells 8\n        tree (reduce (fn [tree cell]\n                       (q/insert tree cell)\n                       ) {:depth  depth\n                          :bounds {:x      c\n                                   :y      c\n                                   :width  c\n                                   :height c}}\n                     (cell-generator cells)\n                     ;glider\n                     )]\n\n    (reset! db-v6 {})\n    (-> tree\n        next-generation-v6\n        )\n    )\n\n  (pprint @db-v6)\n\n\n  (reduce (fn [a {:keys [x y] :as c}]\n            (if (nil? x)\n              a\n              (assoc a [x y] c))\n            ) {}\n          (tree->cells\n            (q/insert-cells {:depth  3\n                             :bounds {:x     4\n                                      :y     4\n                                      :width 4}} glider)\n            ))\n\n  (q/insert-cells {:depth  3\n                   :bounds {:x     4\n                            :y     4\n                            :width 4}} glider)\n\n\n  (let [nw-tree {:bounds {:x 2, :y 2, :width 2},\n                 :depth  2,\n                 :nw     {:bounds     {:x 1, :y 1, :width 1},\n                          :population 0,\n                          :depth      1,\n                          :nw         {:x 0, :y 0, :data {:i 0, :alive? false}},\n                          :ne         {:x 1, :y 0, :data {:i 1, :alive? false}},\n                          :se         {:x 1, :y 1, :data {:i 9, :alive? false}},\n                          :sw         {:x 0, :y 1, :data {:i 8, :alive? false}}},\n                 :ne     {:bounds     {:x 3, :y 1, :width 1},\n                          :population 0,\n                          :depth      1,\n                          :nw         {:x 2, :y 0, :data {:i 2, :alive? false}},\n                          :ne         {:x 3, :y 0, :data {:i 3, :alive? false}},\n                          :se         {:x 3, :y 1, :data {:i 11, :alive? false}},\n                          :sw         {:x 2, :y 1, :data {:i 10, :alive? false}}},\n                 :se     {:bounds     {:x 3, :y 3, :width 1},\n                          :population 0,\n                          :depth      1,\n                          :nw         {:x 2, :y 2, :data {:i 18, :alive? true}},\n                          :ne         {:x 3, :y 2, :data {:i 19, :alive? false}},\n                          :se         {:x 3, :y 3, :data {:i 27, :alive? true}},\n                          :sw         {:x 2, :y 3, :data {:i 26, :alive? false}}},\n                 :sw     {:bounds     {:x 1, :y 3, :width 1},\n                          :population 0,\n                          :depth      1,\n                          :nw         {:x 0, :y 2, :data {:i 16, :alive? false}},\n                          :ne         {:x 1, :y 2, :data {:i 17, :alive? false}},\n                          :se         {:x 1, :y 3, :data {:i 25, :alive? false}},\n                          :sw         {:x 0, :y 3, :data {:i 24, :alive? false}}}}]\n    ;(tree->cells nw-tree)\n    ;(reverse '(1 2 3))\n\n    (->\n      (q/insert-cells {:depth  3\n                       :bounds {:x     4\n                                :y     4\n                                :width 4}} glider)\n      grow-tree\n      )\n\n    )\n\n\n  (println (count (keys @db-v6)))\n\n  )\n\n(bit-and 7 (bit-not 0x01))\n\n\n(bit-or 8 0x01)\n(bit-shift-left 1 1)"]}