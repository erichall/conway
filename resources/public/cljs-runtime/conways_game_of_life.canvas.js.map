{"version":3,"sources":["conways_game_of_life/canvas.cljs"],"mappings":"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","names":["js/conways-game-of-life","js/conways-game-of-life.canvas","js/conways-game-of-life.canvas.ctx-atom","conways-game-of-life.canvas/ctx-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/conways-game-of-life.canvas.img-data-atom","conways-game-of-life.canvas/img-data-atom","js/conways-game-of-life.canvas.canvas-data-atom","conways-game-of-life.canvas/canvas-data-atom","conways-game-of-life.canvas/random-id","js/Math","conways-game-of-life.canvas/ctx-invoke","ctx","fn","args","res","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/js-invoke","conways-game-of-life.canvas/width","cljs.core/deref","conways-game-of-life.canvas/memo-width","cljs.core/memoize","conways-game-of-life.canvas/height","conways-game-of-life.canvas/get-canvas-id","conways-game-of-life.canvas/canvas","conways-game-of-life.canvas/mouse-xy","js-event","target","rect","x","y","conways-game-of-life.canvas/resize-canvas","canvas","css-to-real-pixels","or__4185__auto__","js/window","d-width","G__44790","Math/floor","d-height","G__44791","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.canvas/create-dom-canvas!","width","height","id","canvas?","cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic","js/document","js/document.createElement","var_args","G__44793","conways-game-of-life.canvas/create-canvas","js/Error","h","w","conways_game_of_life.canvas.create_canvas.cljs$core$IFn$_invoke$arity$3","color","js/document.body","cljs.core/reset!","cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$variadic","conways-game-of-life.canvas/begin-path","conways-game-of-life.canvas/close-path","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","conways-game-of-life.canvas/stroke","seq44794","self__4777__auto__","cljs.core/seq","_","conways-game-of-life.canvas/fill-style","conways-game-of-life.canvas/stroke-style","conways-game-of-life.canvas/js-fill","conways-game-of-life.canvas/js-rect","seq44795","G__44796","cljs.core/first","cljs.core/next","self__4776__auto__","conways-game-of-life.canvas/js-move-to","seq44797","G__44798","conways-game-of-life.canvas/js-line-to","seq44799","G__44800","conways-game-of-life.canvas/js-translate","seq44801","G__44802","conways-game-of-life.canvas/js-arc","seq44803","G__44804","conways-game-of-life.canvas/js-fill-rect","seq44805","G__44806","conways-game-of-life.canvas/js-stroke","seq44807","G__44808","conways-game-of-life.canvas/translate","conways_game_of_life.canvas.js_translate.cljs$core$IFn$_invoke$arity$variadic","conways-game-of-life.canvas/put-img-data","img-data","conways-game-of-life.canvas/pixel-offset-index","conways-game-of-life.canvas/draw-pixel","r","g","b","a","i","conways-game-of-life.canvas/get-range","s","e","cljs.core.range.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.canvas/draw-rect","canvas-width","seq__44809","chunk__44810","count__44811","i__44812","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","xx","seq__44821","chunk__44822","count__44823","i__44824","seq__44825","chunk__44826","count__44827","i__44828","yy","conways-game-of-life.canvas/one-d->two-d","cljs.core/mod","G__44829","conways-game-of-life.canvas/alive-mask","conways-game-of-life.canvas/alive?","cell","conways-game-of-life.canvas/draw-rects","view","size","a__4663__auto__","l__4664__auto__","vec__44833","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","alive-color","conways-game-of-life.canvas/white-img","canvas-data","seq__44836","chunk__44837","count__44838","i__44839","cljs.core.range.cljs$core$IFn$_invoke$arity$1","conways-game-of-life.canvas/empty-img!","conways-game-of-life.canvas/clear-canvas","conways-game-of-life.canvas/fill","conways-game-of-life.canvas/rect","seq44840","G__44841","G__44842","G__44843","G__44844","opt","G__44845","conways_game_of_life.canvas.js_rect.cljs$core$IFn$_invoke$arity$variadic","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","conways-game-of-life.canvas/line","x1","y1","x2","y2","G__44846","conways_game_of_life.canvas.js_move_to.cljs$core$IFn$_invoke$arity$variadic","conways_game_of_life.canvas.js_line_to.cljs$core$IFn$_invoke$arity$variadic","conways-game-of-life.canvas/arc","start-angle","stop-angle","G__44847","conways_game_of_life.canvas.js_arc.cljs$core$IFn$_invoke$arity$variadic","conways_game_of_life.canvas.stroke.cljs$core$IFn$_invoke$arity$variadic","conways-game-of-life.canvas/circle","Math/PI","conways-game-of-life.canvas/fill-rect","conways_game_of_life.canvas.js_fill_rect.cljs$core$IFn$_invoke$arity$variadic","conways-game-of-life.canvas/background"],"sourcesContent":["(ns conways-game-of-life.canvas)\n\n(defonce ctx-atom (atom nil))\n(defonce img-data-atom (atom nil))\n(defonce canvas-data-atom (atom nil))\n\n(defn random-id\n  []\n  (str \"_\" (.substr (.toString (.random js/Math) 36) 2 9)))\n\n(defn- ctx-invoke\n  [ctx fn args]\n  (let [res (apply js-invoke ctx fn args)]\n    (if res\n      res\n      ctx)))\n\n(defn- width [] (aget @ctx-atom \"canvas\" \"width\"))\n(def memo-width (memoize width))\n(defn- height [] (aget @ctx-atom \"canvas\" \"height\"))\n\n\n(defn get-canvas-id [] (aget @ctx-atom \"canvas\" \"id\"))\n(defn canvas [] (aget @ctx-atom \"canvas\"))\n\n(defn mouse-xy\n  [js-event]\n  (let [\n        target (aget js-event \"target\")\n        rect (.getBoundingClientRect target)\n        x (- (.-clientX js-event) (.-left rect))\n        y (- (.-clientY js-event) (.-top rect))]\n    {:x x :y y}))\n\n(defn resize-canvas\n  []\n  (let [canvas (.-canvas @ctx-atom)\n        css-to-real-pixels (or (.-devicePixelRatio js/window) 1)\n        d-width (Math/floor (* (.-clientWidth canvas) css-to-real-pixels))\n        d-height (Math/floor (* (.-clientHeight canvas) css-to-real-pixels))]\n    (when-not (or (= (.-width canvas) d-width)\n                  (= (.-height canvas) d-height))\n      (aset canvas \"style\" \"height\" (str (height) \"px\"))\n      (aset canvas \"style\" \"width\" (str (width) \"px\"))\n\n      (set! (.-height canvas) d-height)\n      (set! (.-width canvas) d-width)\n\n      (.scale @ctx-atom css-to-real-pixels css-to-real-pixels)\n      )))\n\n(defn- create-dom-canvas!\n  [width height id target]\n  (let [canvas? (js-invoke js/document \"getElementById\" id)]\n    (when-not canvas?\n      (let [canvas (js/document.createElement \"canvas\")]\n        (do\n          (.setAttribute canvas \"id\" id)\n          (.setAttribute canvas \"height\" (str height \"px\"))\n          (.setAttribute canvas \"width\" (str width \"px\"))\n          (.appendChild target canvas))\n        canvas))))\n\n\n(defn create-canvas\n  ([h w] (create-canvas h w \"black\"))\n  ([h w color]\n   (let [canvas (create-dom-canvas! w h (random-id) js/document.body)]\n     (reset! ctx-atom (.getContext canvas \"2d\" (clj->js \"alpha\" false)))\n\n     (aset canvas \"style\" \"background\" color)\n\n     ;; TODO is this the only way to not blurr lines...?!?!?\n     (.setTransform @ctx-atom 1, 0, 0, 1, 0.5, 0.5)\n\n     ;; TODO might not be the best thing to create this here?\n     ;(reset! canvas-data-atom (.getImageData @ctx-atom 0 0 w h))\n     )))\n\n(defn- begin-path\n  [ctx]\n  (.beginPath ctx)\n  ctx)\n\n(defn- close-path\n  [ctx]\n  (.closePath ctx)\n  ctx)\n\n(defn stroke\n  [& _]\n  (.stroke @ctx-atom))\n\n;; color\n(defn fill-style\n  [color]\n  (aset @ctx-atom \"fillStyle\" color))\n\n(defn stroke-style\n  [color]\n  (aset @ctx-atom \"strokeStyle\" color))\n\n\n(defn- js-fill [ctx] (.fill ctx))\n(defn- js-rect [ctx & args] (ctx-invoke ctx \"rect\" args))\n(defn- js-move-to [ctx & args] (ctx-invoke ctx \"moveTo\" args))\n(defn- js-line-to [ctx & args] (ctx-invoke ctx \"lineTo\" args))\n(defn- js-translate [ctx & args] (ctx-invoke ctx \"translate\" args))\n(defn- js-arc [ctx & args] (ctx-invoke ctx \"arc\" args))\n(defn- js-fill-rect [ctx & args] (ctx-invoke ctx \"fillRect\" args))\n(defn- js-stroke [ctx & args] (ctx-invoke ctx \"stroke\" args))\n\n(defn translate\n  [x y]\n  (js-translate @ctx-atom x y))\n\n(defn put-img-data\n  [img-data]\n  (.putImageData @ctx-atom img-data 0 0))\n\n(defn pixel-offset-index [x y w] (* (+ x (* y w)) 4))\n;(def memo-pixel-offset-index (memoize pixel-offset-index))\n\n(defn draw-pixel\n  [x y r g b a w img-data]\n  (let [i (pixel-offset-index x y w)]\n    (aset img-data \"data\" (+ i 0) r)\n    (aset img-data \"data\" (+ i 1) g)\n    (aset img-data \"data\" (+ i 2) b)\n    (aset img-data \"data\" (+ i 3) a)))\n\n(defn get-range\n  [s e]\n  (range s (+ s e)))\n;(def memo-get-range (memoize get-range))\n\n(defn draw-rect\n  [x y w h r g b a]\n  (let [canvas-width (width)\n        img-data @img-data-atom]\n    (doseq [xx (range x (+ x w))]\n      (doseq [yy (range y (+ y h))]\n        (draw-pixel xx yy r g b a canvas-width\n                    img-data\n                    )))))\n\n\n(defn one-d->two-d\n  [i w]\n  [(mod i w) (Math/floor (/ i w))])\n\n(def alive-mask 1)\n(defn alive?\n  [cell]\n  (= (bit-and cell alive-mask) 1))\n\n(defn draw-rects\n  [view width size]\n  (areduce view i _ 0\n           (let [cell (aget view i)\n                 [x y] (one-d->two-d i width)\n                 alive-color (if (alive? cell) 255 0)]\n             (draw-rect (+ (* x size) 2)\n                        (+ (* y size) 2)\n                        (- size 1) (- size 1)\n                        alive-color alive-color alive-color alive-color))\n           )\n  (put-img-data @img-data-atom)\n  view)\n\n(defn white-img\n  []\n  (let [canvas-data @canvas-data-atom]\n    (doseq [i (range (.-length (.-data canvas-data)))]\n      (aset canvas-data \"data\" i 255))))\n\n(defn empty-img!\n  []\n  (let [ctx @ctx-atom\n        img-data (.createImageData ctx (width) (height))]\n    (reset! img-data-atom img-data)\n    (put-img-data img-data)))\n\n\n(defn clear-canvas\n  []\n  (.clearRect @ctx-atom 0 0 (width) (height)))\n\n(defn fill\n  []\n  (js-fill @ctx-atom))\n\n;; shapes\n(defn rect\n  [x y w h & opt]\n  (doto @ctx-atom\n    begin-path\n    (js-rect x y w h))\n  (when (get-in opt [0 :fill?])\n    (js-fill @ctx-atom))\n\n  ;; default stroke if not batching\n  (when-not (get-in opt [0 :batch?])\n    (js-stroke @ctx-atom))\n  )\n\n(defn line\n  [x1 y1 x2 y2]\n  (doto @ctx-atom\n    begin-path\n    ;(js-translate 0.5 0.5)\n    (js-move-to x1 y1)\n    (js-line-to x2 y2)\n    js-stroke))\n\n(defn arc\n  [x y r start-angle stop-angle]\n  (doto @ctx-atom\n    begin-path\n    ;(js-translate 0.5 0.5)\n    (js-arc x y r start-angle stop-angle)\n    stroke))\n\n(defn circle\n  [x y r]\n  (arc x y r 0 (* 2 Math/PI)))\n\n\n(defn fill-rect\n  [x y h w color]\n  (fill-style color)\n  (js-fill-rect @ctx-atom x y w h))\n\n\n(defn background\n  [color]\n  (fill-rect 0 0 (width) (height) color))\n\n(comment\n\n  )\n"]}